local assetHelper = asset.require('util/asset_helper')
local transforms = asset.require("scene/solarsystem/sun/transforms")
local transforms = asset.require('./transforms')



local hslToRgb = function (h, s, l)
  local r, g, b

  if s == 0 then
    r, g, b = l, l, l -- achromatic
  else
    function hue2rgb(p, q, t)
      if t < 0   then t = t + 1 end
      if t > 1   then t = t - 1 end
      if t < 1/6 then return p + (q - p) * 6 * t end
      if t < 1/2 then return q end
      if t < 2/3 then return p + (q - p) * (2/3 - t) * 6 end
      return p
    end

    local q
    if l < 0.5 then q = l * (1 + s) else q = l + s - l * s end
    local p = 2 * l - q

    r = hue2rgb(p, q, h + 1/3)
    g = hue2rgb(p, q, h)
    b = hue2rgb(p, q, h - 1/3)
  end

  return r, g, b
end
local i = 0

local getPlanets = function (guiPath, planetsfile)
  local genPlanets = {};
  --skip the first line
  local notFirstLine = false;

  for line in io.lines(openspace.absPath(planetsfile)) do
      if (notFirstLine) then
        -- describes the data
        local matchstring = '(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-)$'
        local group, name, _eccentricity, _semimajoraxis, _inclination, _ascendingnode, _argumentofperiapsis, _meananomaly, _epoch, _period,  _radius, _surfacetexture = line:match(matchstring)

        group = (group == '' and globe or group)

        local aPlanet = {
          Identifier = name,
          Parent = transforms.TrappistCenter.Identifier,
          Transform = {
              Translation = {
                  Type = "KeplerTranslation",
                  Eccentricity = tonumber(_eccentricity),
                  SemiMajorAxis = tonumber(_semimajoraxis),
                  Inclination = tonumber(_inclination),
                  AscendingNode = tonumber(_ascendingnode),
                  ArgumentOfPeriapsis = tonumber(_argumentofperiapsis),
                  MeanAnomaly = 0.0,
                  Epoch = _epoch,
                  Period = tonumber(_period);
                  }
            },
            Renderable = {
                Type = "RenderableGlobe",
                Radii = tonumber(_radius),
                SegmentsPerPatch = 64,
                PerformShading = true,
                Layers = {
                ColorLayers = {
                      {
                        Identifier = "Texture",
                        FilePath = asset.localResource("addons/trappist/textures/".._surfacetexture..""),
                        Enabled = true
                      }
                    }
                  }
                },
            Tag = { "Trappist", "Planet" },
            GUI = {
                Name = name,
                Path = '/Milky Way/Trappist/'.. name
            }
        }


        table.insert(genPlanets, aPlanet);


        local aTrail = {
            Identifier = name .. "Trail",
            Parent = transforms.TrappistCenter.Identifier,
            Renderable = {
                Type = "RenderableTrailOrbit",
                Translation = {
                    Type = "KeplerTranslation",
                    Eccentricity = tonumber(_eccentricity),
                    SemiMajorAxis = tonumber(_semimajoraxis),
                    Inclination = tonumber(_inclination),
                    AscendingNode = tonumber(_ascendingnode),
                    ArgumentOfPeriapsis = tonumber(_argumentofperiapsis),
                    MeanAnomaly = 0.0,
                    Epoch = _epoch,
                    Period = tonumber(_period);
                },

                Color = {hslToRgb(i*.1, .9, .7) },
                Period = tonumber(_period)/86400,
                Resolution = 500,
                Tag = { "PlanetTrail", "PlanetTrail" }
            },
            GUI = {
            Name = name..'trail',
            Path = '/Milky Way/Trappist/'.. name
            }
        }
        table.insert(genPlanets, aTrail);

      else
        notFirstLine = true
      end
      i = i + 1
  end

  return genPlanets
end

asset.export('getPlanets', getPlanets)
