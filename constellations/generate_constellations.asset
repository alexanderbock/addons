local assetHelper = asset.require('util/asset_helper')
local transforms = asset.require("scene/solarsystem/sun/transforms")

--function that reads the file

local getConstellations = function (guiPath, constellationfile)
  local genConstellations = {};
  --skip the first line
  local notFirstLine = false;
  -- define parsec to meters
  local PARSEC_CONSTANT = 3.0856776E16;
  -- how many parsecs away do you want the images to be?
  local distanceMultiplier = 100;
  local baseScale = 1e18;
  for line in io.lines(openspace.absPath(constellationfile)) do
      if (notFirstLine) then
        -- describes the data
        local matchstring = '(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-),(.-)$'
        local group, name, x, y, z, scale, imageName, rotX, rotY, rotZ, centerStar = line:match(matchstring)
        local magVec = math.sqrt(x*x+y*y+z*z)
        local normx = x/magVec
        local normy = y/magVec
        local normz = z/magVec

        group = (group == '' and globe or group)

        local aconstellation = {
          Identifier = guiPath .. '-' .. name,
          Parent = transforms.SolarSystemBarycenter.Identifier,
          Transform = {
              Translation = {
                  Type = "StaticTranslation",
                  -- position is in parsecs from the SolarSystemBarycenter, so convert to meters
                  Position = {normx*PARSEC_CONSTANT*distanceMultiplier, normy*PARSEC_CONSTANT*distanceMultiplier, normz*PARSEC_CONSTANT*distanceMultiplier}
              },
              Rotation = {
                  Type = "StaticRotation",
                  Rotation = {tonumber(rotX),tonumber(rotY),tonumber(rotZ)}
              }

          },
          Renderable = {
              Type = "RenderablePlaneImageLocal",
              Size = tonumber(baseScale*scale*distanceMultiplier/100),
              Enabled = true,
              Origin = "Center",
              Billboard = false,
              Texture = asset.localResource('addons/constellations/constellation-art/' .. imageName ..''),
              BlendMode = "Additive",
              Opacity = 0.3
          },
          Tag = { "ConstellationArtImage", group },
          GUI = {
              Name = name ..'-image',
              Path = '/Constellations/' .. name
          }

        }

        table.insert(genConstellations, aconstellation);



      else
        notFirstLine = true
      end
  end
  return genConstellations
end

asset.export('getConstellations', getConstellations)
